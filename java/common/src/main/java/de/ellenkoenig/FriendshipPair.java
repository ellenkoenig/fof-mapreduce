package de.ellenkoenig;

import java.lang.IllegalArgumentException;

/**
 * Represents a two people who are friends (either directly or indirectly)
 */
public class FriendshipPair {
    private String firstPersonsName;
    private String secondPersonsName;

    public FriendshipPair(String firstPersonsName, String secondPersonsName) {
        this.firstPersonsName = firstPersonsName;
        this.secondPersonsName = secondPersonsName;
    }

    public static FriendshipPair createFromInputLine(String input) throws IllegalArgumentException {
        FriendshipPair friendshipPair;
        if(input != null) {
            //while I would like to split only on tabs, this seems to be unreliable while reading from System.in
            String[] pair = input.split("\\s+");
            if (pair.length == 2) {
                friendshipPair = new FriendshipPair(pair[0], pair[1]);
            } else {
                throw new IllegalArgumentException();
            }
            return friendshipPair;
        } else {
            throw new IllegalArgumentException();
        }
    }

    public String getFirstPersonsName() {
        return firstPersonsName;
    }

    public String getSecondPersonsName() {
        return secondPersonsName;
    }

    @Override
    public String toString() {
        return firstPersonsName + "\t" + secondPersonsName;
    }

    /**
     * Method auto-generated by IDE. Performs comparison based on equality of all member attribute values,
     * replaces default comparison by object identity
     */
    @Override
    public boolean equals(Object object) {
        if (this == object) return true;
        if (object == null || getClass() != object.getClass()) return false;

        FriendshipPair that = (FriendshipPair) object;

        if (firstPersonsName != null ? !firstPersonsName.equals(that.firstPersonsName) : that.firstPersonsName != null)
            return false;
        return (secondPersonsName != null ? !secondPersonsName.equals(that.secondPersonsName) : that.secondPersonsName != null);
            return false;

        return true;
    }

    /**
     * Method auto-generated by IDE. Performs hash code computation based on all member attribute values,
     * replaces default behavior
     */
    @Override
    public int hashCode() {
        int result = firstPersonsName != null ? firstPersonsName.hashCode() : 0;
        result = 31 * result + (secondPersonsName != null ? secondPersonsName.hashCode() : 0);
        return result;
    }
}